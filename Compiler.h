/*
* Name: David Nguyen (891362089)
* Professor's Name: Professor Anthony Le
* Date: 12/16/19
* Assignment Name: Syntax Analysis
* Assignment #: 3
*/
#ifndef Compiler_h
#define Compiler_h
// #pragma once
#include <string>
#include <iostream>
#include <iomanip>
#include <cmath>
#include <fstream>
#include <stack>
#include <tuple>
#include <vector>
using namespace std;

typedef pair<string, string> tl;       //aliasing a pair of tokens, and lexeme.
typedef tuple<tl, vector<string>> tlp; //token lexeme production tuple.
typedef tuple<string, int, string> st; //symbol table value.
typedef tuple<int, string, int> as;
class Compiler
{
public:
        void readFile(const string &);
        void writeFile(const string &);

private:
        //--------------------Lexer Analyzer--------------------------//
        void lexer(string);
        void insert_token(int, string);
        int char_to_col(char);
        int state = 0;

        //state table
        const vector<vector<int>> table =
            //  0  1  2  3  4   5   6
            {
                //  !  o  p  s  d   l   .
                {1, 2, 3, 4, 5, 6, 7},   //0 starting state
                {0, 0, 0, 0, 0, 0, 0},   //1 comment
                {0, 0, 0, 0, 0, 0, 0},   //2 operator
                {0, 0, 0, 0, 0, 0, 0},   //3 space
                {0, 0, 0, 0, 0, 0, 0},   //4 separator
                {0, 0, 0, 0, 8, 0, 7},   //5 integers
                {0, 0, 0, 0, 11, 12, 0}, //6 identifier
                {0, 0, 0, 0, 9, 0, 0},   //7 floats
                {0, 0, 0, 0, 8, 0, 7},   //8 integer
                {0, 0, 0, 0, 10, 0, 0},  //9 float
                {0, 0, 0, 0, 10, 0, 0},  //10 float
                {0, 0, 0, 0, 11, 12, 0}, //11 identifier
                {0, 0, 0, 0, 11, 12, 0}, //12 identifier
        };

        vector<string> kw =
            {
                "alignas", "alignof", "and", "andeq", "asm", "atomic_cancel", "atomic_commit",
                "atomic_noexcept", "auto", "bitand", "bitor", "bool", "break", "case", "catch",
                "char", "char8_t", "char16_t", "char32_t", "class", "compl", "concept", "const",
                "consteval", "constexpr", "constinit", "const_cast", "continue", "co_await", "co_return",
                "co_yield", "decltype", "default", "delete", "do", "double", "dynamic_cast", "else",
                "enum", "explicit", "export", "extern", "false", "float", "for", "friend", "goto",
                "if", "inline", "int", "long", "mutable", "namespace", "new", "noexcept", "not", "not_eq",
                "nullptr", "operator", "or", "or_eq", "private", "protected", "public", "register",
                "reinterpret_cast", "requires", "return", "short", "signed", "sizeof", "static",
                "static_assert", "static_cast", "struct", "switch", "synchronized", "template", "this",
                "thread_local", "throw", "true", "try", "typedef", "typeid", "typename", "union", "unsigned",
                "using", "virtual", "void", "volatitle", "wchar_t", "while", "xor", "xor_eq"};

        //-------------------Syntax Analyzer--------------------------//
        vector<vector<tlp>> tlp_list;
        int index = 0;
        //-------------------LR Parser-----------------------//
        int convert_token(const string &);
        void push_down_LR_driver();
        string convert2production(int);
        int num_of_pop(string);
        string check_id_num(int);

        //----------------------------------------------------Intermediate Code Generator------------------------------------------------------------------//
        vector<st> sym_table;
        vector<as> asm_list;
        int line = 0;
        int jmp_line = 0;
        int mem_addr = 5000; //a made up random memory address.
        string curr_DT;      //current data type.

        int temp_1 = 0; //to hold the current identifier memory address.
        int temp_2 = 0; //to hold temp_1 identifier memory address only if temp_1 is taken.
        int temp_3 = 0; //to hold temp_2 only if temp_2 is taken.
        // A -> id = E;
        bool matched_id = false;
        bool assignment = false;
        // E -> E + T | E - T
        bool addition = false;
        bool subtraction = false;

        // T -> T * F | T / F
        bool multiplication = false;
        bool division = false;

        //    S -> if E { S } else { S }   //
        //    S -> while E { S }
        bool conditional = false;

        void control(string, int);
        void gen_instr(string, int);
        void store_symbol(string, int, string);
        bool check_symbol(string);
        bool check_type(int, int);
        //------------------------------------------------------SLR Table-------------------------------------------------------------------//
        vector<vector<string>> SLR_table = {
        //    if     {	   }   else  while   id	   int	  float  bool	 ,	;     =     +	  -	<     >	    *	  /    (      )	  num	  $    S    D	 N     M     A	  E	T      F
            {"s4", "-1", "-1", "-1", "s13", "s28", "s21", "s22", "s23", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "1", "3", "18", "-1", "2", "-1", "-1", "-1"},          // 0
            {"-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "accepted", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1"},      // 1
            {"-1", "-1", "r1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "r1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1"},            // 2
            {"-1", "-1", "r2", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "r2", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1"},            // 3
            {"-1", "-1", "-1", "-1", "-1", "s28", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "s47", "-1", "s50", "-1", "-1", "-1", "-1", "-1", "-1", "5", "41", "46"},          // 4
            {"-1", "s6", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "s33", "s35", "s37", "s39", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1"},        // 5
            {"s4", "-1", "-1", "-1", "s13", "s28", "s21", "s22", "s23", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "7", "3", "18", "-1", "2", "-1", "-1", "-1"},          // 6
            {"-1", "-1", "s8", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1"},            // 7
            {"-1", "-1", "-1", "s9", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1"},            // 8
            {"-1", "s10", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1"},           // 9
            {"s4", "-1", "-1", "-1", "s13", "s28", "s21", "s22", "s23", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "11", "3", "18", "-1", "2", "-1", "-1", "-1"},         //10
            {"-1", "-1", "s12", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1"},           //11
            {"-1", "-1", "r3", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "r3", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1"},            //12
            {"-1", "-1", "-1", "-1", "-1", "s28", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "s47", "-1", "s50", "-1", "-1", "-1", "-1", "-1", "-1", "14", "41", "46"},         //13
            {"-1", "s15", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "s33", "s35", "s37", "s39", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1"},       //14
            {"s4", "-1", "-1", "-1", "s13", "s28", "s21", "s22", "s23", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "16", "3", "18", "-1", "2", "-1", "-1", "-1"},         //15
            {"-1", "-1", "s17", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1"},           //16
            {"-1", "-1", "r4", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "r4", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1"},            //17
            {"-1", "-1", "-1", "-1", "-1", "s19", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1"},           //18
            {"-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "s24", "s27", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "20", "-1", "-1", "-1", "-1"},          //19
            {"-1", "-1", "r5", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "r5", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1"},            //20
            {"-1", "-1", "-1", "-1", "-1", "r6", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1"},            //21
            {"-1", "-1", "-1", "-1", "-1", "r7", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1"},            //22
            {"-1", "-1", "-1", "-1", "-1", "r8", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1"},            //23
            {"-1", "-1", "-1", "-1", "-1", "s25", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1"},           //24
            {"-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "s24", "s27", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "26", "-1", "-1", "-1", "-1"},          //25
            {"-1", "-1", "r9", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "r9", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1"},            //26
            {"-1", "-1", "r10", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "r10", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1"},          //27
            {"-1", "r21", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "r21", "r21", "s29", "r21", "r21", "r21", "r21", "r21", "r21", "-1", "r21", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1"}, //28
            {"-1", "-1", "-1", "-1", "-1", "s28", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "s47", "-1", "s50", "-1", "-1", "-1", "-1", "-1", "-1", "30", "41", "46"},         //29
            {"-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "s31", "-1", "s33", "s35", "s37", "s39", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1"},       //30
            {"-1", "-1", "r11", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "r11", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1"},          //31
            {"-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "s33", "s35", "s37", "s39", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1"},        //32
            {"-1", "-1", "-1", "-1", "-1", "s28", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "s47", "-1", "s50", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "34", "46"},         //33
            {"-1", "r12", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "r12", "-1", "r12", "r12", "r12", "r12", "s42", "s44", "-1", "r12", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1"},   //34
            {"-1", "-1", "-1", "-1", "-1", "s28", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "s47", "-1", "s50", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "36", "46"},         //35
            {"-1", "r13", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "r13", "-1", "r13", "r13", "r13", "r13", "s42", "s44", "-1", "r13", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1"},   //36
            {"-1", "-1", "-1", "-1", "-1", "s28", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "s47", "-1", "s50", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "38", "46"},         //37
            {"-1", "r14", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "r14", "-1", "r14", "r14", "r14", "r14", "s42", "s44", "-1", "r14", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1"},   //38
            {"-1", "-1", "-1", "-1", "-1", "s28", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "s47", "-1", "s50", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "40", "46"},         //39
            {"-1", "r15", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "r15", "-1", "r15", "r15", "r15", "r15", "s42", "s44", "-1", "r15", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1"},   //40
            {"-1", "r16", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "r16", "-1", "r16", "r16", "r16", "r16", "s42", "s44", "-1", "r16", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1"},   //41
            {"-1", "-1", "-1", "-1", "-1", "s28", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "s47", "-1", "s50", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "43"},         //42
            {"-1", "r17", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "r17", "-1", "r17", "r17", "r17", "r17", "r17", "r17", "-1", "r17", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1"},   //43
            {"-1", "-1", "-1", "-1", "-1", "s28", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "s47", "-1", "s50", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "45"},         //44
            {"-1", "r18", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "r18", "-1", "r18", "r18", "r18", "r18", "r18", "r18", "-1", "r18", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1"},   //45
            {"-1", "r19", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "r19", "-1", "r19", "r19", "r19", "r19", "r19", "r19", "-1", "r19", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1"},   //46
            {"-1", "-1", "-1", "-1", "-1", "s28", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "s47", "-1", "s50", "-1", "-1", "-1", "-1", "-1", "-1", "48", "41", "46"},         //47
            {"-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "s33", "s35", "s37", "s39", "-1", "-1", "-1", "s49", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1"},       //48
            {"-1", "r20", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "r20", "-1", "r20", "r20", "r20", "r20", "r20", "r20", "-1", "r20", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1"},   //49
            {"-1", "r22", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "r22", "-1", "r22", "r22", "r22", "r22", "r22", "r22", "-1", "r22", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1"},   //50
        };
};
#endif